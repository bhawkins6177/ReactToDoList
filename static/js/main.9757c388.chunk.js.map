{"version":3,"sources":["logo.svg","Tasks.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Tasks","useState","taskState","setTaskState","setIncompleteTask","setCompleteTask","inputValue","setInputValue","taskDisplay","setTaskDisplay","taskDisplayView","map","element","index","className","isComplete","onClick","e","id","preventDefault","tempState","console","log","liOnClick","name","newArray","filter","item","deleteFunction","value","onChange","event","target","temp","myNewObj","length","push","completeTemp","completeArray","i","incompleteTemp","incompleteArray","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9757c388.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect, ReactDOM} from \"react\"\n\n\n\n\nfunction Tasks(){\n\n    // all of my states \n    const [taskState, setTaskState] = useState([])\n\n    const [incompleteTask, setIncompleteTask] = useState([])\n\n    const [completeTask, setCompleteTask] = useState([])\n    \n    const [inputValue, setInputValue] = useState('')  \n\n    const [taskDisplay, setTaskDisplay] = useState([])\n\n    // logic\n    // function task(name) {\n    //     this.name = name\n    //     this.isComplete = false;\n\n    //   }\n    \n    const inputFunctionHandler = (event) => {\n        event.preventDefault()\n        setInputValue(event.target.value);\n        console.log(inputValue)\n      };\n    \n    const submitTask = (e) =>{\n        e.preventDefault();\n        \n        let temp = taskState;\n        const myNewObj = {\n            name: inputValue,\n            isComplete: false,\n            id: taskState.length \n        }\n        temp.push(myNewObj)\n        setTaskState(temp)\n        setTaskDisplay(temp);// new check this\n        setInputValue('');\n        \n        \n        // console.log(taskState);\n        // console.log(taskState[0].isComplete)\n\n    }\n    const dropDownBtn = (e) => {\n        e.preventDefault();\n    }\n    \n    \n    const liOnClick = (e,id) => {\n        e.preventDefault();\n        const tempState = taskState.map(element => {\n            if (element.id === id){\n                element.isComplete = !element.isComplete\n            }\n            return element\n        })\n        setTaskState(tempState)\n        console.log('test3')\n        console.log(taskState)\n    }\n    const inCompleteTaskHandler = (e)=>{\n        e.preventDefault();\n        let incompleteTemp = taskState;\n        const incompleteArray = [];\n        for (let i = 0; i<incompleteTemp.length; i++){\n            if (incompleteTemp[i].isComplete === false){\n                incompleteArray.push(incompleteTemp[i])\n                console.log(incompleteTemp[i])\n            }\n        }\n        console.log(incompleteArray)\n        setIncompleteTask(incompleteArray)\n        setTaskDisplay(incompleteArray);// i want to use .map but cant get it to work\n    }\n\n    const completedTaskHandler = (e)=>{\n        e.preventDefault();\n        let completeTemp = taskState;\n        const completeArray = [];\n        for (let i = 0; i <completeTemp.length; i++){\n            if (completeTemp[i].isComplete === true){\n                completeArray.push(completeTemp[i])\n                console.log(completeTemp[i])\n        }\n    }\n    console.log(completeArray);\n    setCompleteTask(completeArray);\n    setTaskDisplay(completeArray);\n\n    \n    }\n    const allTaskHandler =(e)=> {\n        e.preventDefault();\n        console.log(taskState)\n        setTaskDisplay(taskState);\n    }\n\n    const deleteFunction = (e, element)=>{\n        e.preventDefault();\n        const newArray = taskState.filter((item) => item !== element);// this is working\n        console.log('newArray',newArray)\n\n        // for some reasi the setTaskState is not working, as in its not setting the taskState to equal the newArray. \n        setTaskState(newArray);// this is not\n        console.log('taskState',taskState)\n        setTaskDisplay(newArray);\n       \n        \n       \n    }\n    let taskDisplayView = taskDisplay.map((element,index) => {\n     return(  \n        <div className = 'taskContent'>\n            <li className = {`tasks${element.isComplete  ? 'crossed': ''}`}onClick = {(e)=> liOnClick(e, element.id)}>{element.name}</li>\n            <button className = 'dltBtn' onClick ={(e) => deleteFunction(e, element)} >Delete</button>\n        </div>\n     )\n    })\n\n    // create a task logic\n\n    // my JSX\n\n    return (\n        <div>\n            <div id = 'formAndInput'>\n        <form>\n            <input value = {inputValue} onChange={inputFunctionHandler} ></input>\n            <button onClick = {submitTask}>Submit</button>\n        </form>\n        <div className=\"dropdown\">\n          <button className=\"dropbtn\" onClick={dropDownBtn}>View</button>\n          <div className=\"dropdown-content\">\n            <button onClick = {allTaskHandler}>All</button>\n            <button onClick = {completedTaskHandler}>Complete</button>\n            <button onClick = {inCompleteTaskHandler}>Incomplete</button>\n          </div>\n        </div>\n        </div>\n    \n        <div className=\"taskDisplay\">\n            {taskDisplayView}\n        </div>\n        </div>\n    )\n}\n\n\n\nexport default Tasks;\n\n// Use a state to display the var, change that atate based on the dropdown menu\n// OR use the varieble, but set its value to the taskDisplay State, witch will change base on the drop down menue. The only issue of how to give it a default state? maybe just do this const [taskDisplay, setTaskDisplay] = ([taskState])\n","import React, {useState, useEffect, ReactDOM} from \"react\"\n\nfunction Header(){\n   return( \n   <header id = 'header'>\n        ToDo List!\n    </header>\n   )\n}\n\nexport default Header;","import logo from './logo.svg';\nimport './App.css';\n\nimport Tasks from './Tasks';\nimport Header from './Header';\n\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Tasks/>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}