[{"/home/brandon/the_odin_project/reacttodolist/src/index.js":"1","/home/brandon/the_odin_project/reacttodolist/src/App.js":"2","/home/brandon/the_odin_project/reacttodolist/src/reportWebVitals.js":"3","/home/brandon/the_odin_project/reacttodolist/src/Header.js":"4","/home/brandon/the_odin_project/reacttodolist/src/Tasks.js":"5"},{"size":500,"mtime":1631233022789,"results":"6","hashOfConfig":"7"},{"size":258,"mtime":1631562398156,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1631233022793,"results":"9","hashOfConfig":"7"},{"size":180,"mtime":1631562399688,"results":"10","hashOfConfig":"7"},{"size":4757,"mtime":1631562401231,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"17ndbua",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/home/brandon/the_odin_project/reacttodolist/src/index.js",[],["26","27"],"/home/brandon/the_odin_project/reacttodolist/src/App.js",["28"],"import logo from './logo.svg';\nimport './App.css';\n\nimport Tasks from './Tasks';\nimport Header from './Header';\n\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Tasks/>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","/home/brandon/the_odin_project/reacttodolist/src/reportWebVitals.js",[],"/home/brandon/the_odin_project/reacttodolist/src/Header.js",["29","30","31"],"import React, {useState, useEffect, ReactDOM} from \"react\"\n\nfunction Header(){\n   return( \n   <header id = 'header'>\n        ToDo List!\n    </header>\n   )\n}\n\nexport default Header;","/home/brandon/the_odin_project/reacttodolist/src/Tasks.js",["32","33","34","35"],"import React, {useState, useEffect, ReactDOM} from \"react\"\n\n\n\n\nfunction Tasks(){\n\n    // all of my states \n    const [taskState, setTaskState] = useState([])\n\n    const [incompleteTask, setIncompleteTask] = useState([])\n\n    const [completeTask, setCompleteTask] = useState([])\n    \n    const [inputValue, setInputValue] = useState('')  \n\n    const [taskDisplay, setTaskDisplay] = useState([])\n\n    // logic\n    // function task(name) {\n    //     this.name = name\n    //     this.isComplete = false;\n\n    //   }\n    \n    const inputFunctionHandler = (event) => {\n        event.preventDefault()\n        setInputValue(event.target.value);\n        console.log(inputValue)\n      };\n    \n    const submitTask = (e) =>{\n        e.preventDefault();\n        \n        let temp = taskState;\n        const myNewObj = {\n            name: inputValue,\n            isComplete: false,\n            id: taskState.length \n        }\n        temp.push(myNewObj)\n        setTaskState(temp)\n        setTaskDisplay(temp);// new check this\n        setInputValue('');\n        \n        \n        // console.log(taskState);\n        // console.log(taskState[0].isComplete)\n\n    }\n    const dropDownBtn = (e) => {\n        e.preventDefault();\n    }\n    \n    \n    const liOnClick = (e,id) => {\n        e.preventDefault();\n        const tempState = taskState.map(element => {\n            if (element.id === id){\n                element.isComplete = !element.isComplete\n            }\n            return element\n        })\n        setTaskState(tempState)\n        console.log('test3')\n        console.log(taskState)\n    }\n    const inCompleteTaskHandler = (e)=>{\n        e.preventDefault();\n        let incompleteTemp = taskState;\n        const incompleteArray = [];\n        for (let i = 0; i<incompleteTemp.length; i++){\n            if (incompleteTemp[i].isComplete === false){\n                incompleteArray.push(incompleteTemp[i])\n                console.log(incompleteTemp[i])\n            }\n        }\n        console.log(incompleteArray)\n        setIncompleteTask(incompleteArray)\n        setTaskDisplay(incompleteArray);// i want to use .map but cant get it to work\n    }\n\n    const completedTaskHandler = (e)=>{\n        e.preventDefault();\n        let completeTemp = taskState;\n        const completeArray = [];\n        for (let i = 0; i <completeTemp.length; i++){\n            if (completeTemp[i].isComplete === true){\n                completeArray.push(completeTemp[i])\n                console.log(completeTemp[i])\n        }\n    }\n    console.log(completeArray);\n    setCompleteTask(completeArray);\n    setTaskDisplay(completeArray);\n\n    \n    }\n    const allTaskHandler =(e)=> {\n        e.preventDefault();\n        console.log(taskState)\n        setTaskDisplay(taskState);\n    }\n\n    const deleteFunction = (e, element)=>{\n        e.preventDefault();\n        const newArray = taskState.filter((item) => item !== element);// this is working\n        console.log('newArray',newArray)\n\n        // for some reasi the setTaskState is not working, as in its not setting the taskState to equal the newArray. \n        setTaskState(newArray);// this is not\n        console.log('taskState',taskState)\n        setTaskDisplay(newArray);\n       \n        \n       \n    }\n    let taskDisplayView = taskDisplay.map((element,index) => {\n     return(  \n        <div className = 'taskContent'>\n            <li className = {`tasks${element.isComplete  ? 'crossed': ''}`}onClick = {(e)=> liOnClick(e, element.id)}>{element.name}</li>\n            <button className = 'dltBtn' onClick ={(e) => deleteFunction(e, element)} >Delete</button>\n        </div>\n     )\n    })\n\n    // create a task logic\n\n    // my JSX\n\n    return (\n        <div>\n            <div id = 'formAndInput'>\n        <form>\n            <input value = {inputValue} onChange={inputFunctionHandler} ></input>\n            <button onClick = {submitTask}>Submit</button>\n        </form>\n        <div className=\"dropdown\">\n          <button className=\"dropbtn\" onClick={dropDownBtn}>View</button>\n          <div className=\"dropdown-content\">\n            <button onClick = {allTaskHandler}>All</button>\n            <button onClick = {completedTaskHandler}>Complete</button>\n            <button onClick = {inCompleteTaskHandler}>Incomplete</button>\n          </div>\n        </div>\n        </div>\n    \n        <div className=\"taskDisplay\">\n            {taskDisplayView}\n        </div>\n        </div>\n    )\n}\n\n\n\nexport default Tasks;\n\n// Use a state to display the var, change that atate based on the dropdown menu\n// OR use the varieble, but set its value to the taskDisplay State, witch will change base on the drop down menue. The only issue of how to give it a default state? maybe just do this const [taskDisplay, setTaskDisplay] = ([taskState])\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":12},{"ruleId":"40","severity":1,"message":"44","line":1,"column":16,"nodeType":"42","messageId":"43","endLine":1,"endColumn":24},{"ruleId":"40","severity":1,"message":"45","line":1,"column":26,"nodeType":"42","messageId":"43","endLine":1,"endColumn":35},{"ruleId":"40","severity":1,"message":"46","line":1,"column":37,"nodeType":"42","messageId":"43","endLine":1,"endColumn":45},{"ruleId":"40","severity":1,"message":"45","line":1,"column":26,"nodeType":"42","messageId":"43","endLine":1,"endColumn":35},{"ruleId":"40","severity":1,"message":"46","line":1,"column":37,"nodeType":"42","messageId":"43","endLine":1,"endColumn":45},{"ruleId":"40","severity":1,"message":"47","line":11,"column":12,"nodeType":"42","messageId":"43","endLine":11,"endColumn":26},{"ruleId":"40","severity":1,"message":"48","line":13,"column":12,"nodeType":"42","messageId":"43","endLine":13,"endColumn":24},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'ReactDOM' is defined but never used.","'incompleteTask' is assigned a value but never used.","'completeTask' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]