{"ast":null,"code":"import _slicedToArray from\"/home/brandon/the_odin_project/reacttodolist/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,ReactDOM}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Tasks(){// all of my states \nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),taskState=_useState2[0],setTaskState=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),incompleteTask=_useState4[0],setIncompleteTask=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),completeTask=_useState6[0],setCompleteTask=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),inputValue=_useState8[0],setInputValue=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),taskDisplay=_useState10[0],setTaskDisplay=_useState10[1];// logic\n// function task(name) {\n//     this.name = name\n//     this.isComplete = false;\n//   }\nvar inputFunctionHandler=function inputFunctionHandler(event){event.preventDefault();setInputValue(event.target.value);console.log(inputValue);};var submitTask=function submitTask(e){e.preventDefault();var temp=taskState;var myNewObj={name:inputValue,isComplete:false,id:taskState.length};temp.push(myNewObj);setTaskState(temp);setTaskDisplay(temp);// new check this\nsetInputValue('');// console.log(taskState);\n// console.log(taskState[0].isComplete)\n};var dropDownBtn=function dropDownBtn(e){e.preventDefault();};var liOnClick=function liOnClick(e,id){e.preventDefault();var tempState=taskState.map(function(element){if(element.id===id){element.isComplete=!element.isComplete;}return element;});setTaskState(tempState);console.log('test3');console.log(taskState);};var inCompleteTaskHandler=function inCompleteTaskHandler(e){e.preventDefault();var incompleteTemp=taskState;var incompleteArray=[];for(var i=0;i<incompleteTemp.length;i++){if(incompleteTemp[i].isComplete===false){incompleteArray.push(incompleteTemp[i]);console.log(incompleteTemp[i]);}}console.log(incompleteArray);setIncompleteTask(incompleteArray);setTaskDisplay(incompleteArray);// i want to use .map but cant get it to work\n};var completedTaskHandler=function completedTaskHandler(e){e.preventDefault();var completeTemp=taskState;var completeArray=[];for(var i=0;i<completeTemp.length;i++){if(completeTemp[i].isComplete===true){completeArray.push(completeTemp[i]);console.log(completeTemp[i]);}}console.log(completeArray);setCompleteTask(completeArray);setTaskDisplay(completeArray);};var allTaskHandler=function allTaskHandler(e){e.preventDefault();console.log(taskState);setTaskDisplay(taskState);};var deleteFunction=function deleteFunction(e,element){e.preventDefault();var newArray=taskState.filter(function(item){return item!==element;});// this is working\nconsole.log('newArray',newArray);// for some reasi the setTaskState is not working, as in its not setting the taskState to equal the newArray. \nsetTaskState(newArray);// this is not\nconsole.log('taskState',taskState);setTaskDisplay(newArray);};var taskDisplayView=taskDisplay.map(function(element,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"taskContent\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"tasks\".concat(element.isComplete?'crossed':''),onClick:function onClick(e){return liOnClick(e,element.id);},children:element.name}),/*#__PURE__*/_jsx(\"button\",{className:\"dltBtn\",onClick:function onClick(e){return deleteFunction(e,element);},children:\"Delete\"})]});});// create a task logic\n// my JSX\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{id:\"formAndInput\",children:[/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(\"input\",{value:inputValue,onChange:inputFunctionHandler}),/*#__PURE__*/_jsx(\"button\",{onClick:submitTask,children:\"Submit\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dropdown\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"dropbtn\",onClick:dropDownBtn,children:\"View\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"dropdown-content\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:allTaskHandler,children:\"All\"}),/*#__PURE__*/_jsx(\"button\",{onClick:completedTaskHandler,children:\"Complete\"}),/*#__PURE__*/_jsx(\"button\",{onClick:inCompleteTaskHandler,children:\"Incomplete\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"taskDisplay\",children:taskDisplayView})]});}export default Tasks;// Use a state to display the var, change that atate based on the dropdown menu\n// OR use the varieble, but set its value to the taskDisplay State, witch will change base on the drop down menue. The only issue of how to give it a default state? maybe just do this const [taskDisplay, setTaskDisplay] = ([taskState])","map":{"version":3,"sources":["/home/brandon/the_odin_project/reacttodolist/src/Tasks.js"],"names":["React","useState","useEffect","ReactDOM","Tasks","taskState","setTaskState","incompleteTask","setIncompleteTask","completeTask","setCompleteTask","inputValue","setInputValue","taskDisplay","setTaskDisplay","inputFunctionHandler","event","preventDefault","target","value","console","log","submitTask","e","temp","myNewObj","name","isComplete","id","length","push","dropDownBtn","liOnClick","tempState","map","element","inCompleteTaskHandler","incompleteTemp","incompleteArray","i","completedTaskHandler","completeTemp","completeArray","allTaskHandler","deleteFunction","newArray","filter","item","taskDisplayView","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, ReactDOM} from \"react\"\n\n\n\n\nfunction Tasks(){\n\n    // all of my states \n    const [taskState, setTaskState] = useState([])\n\n    const [incompleteTask, setIncompleteTask] = useState([])\n\n    const [completeTask, setCompleteTask] = useState([])\n    \n    const [inputValue, setInputValue] = useState('')  \n\n    const [taskDisplay, setTaskDisplay] = useState([])\n\n    // logic\n    // function task(name) {\n    //     this.name = name\n    //     this.isComplete = false;\n\n    //   }\n    \n    const inputFunctionHandler = (event) => {\n        event.preventDefault()\n        setInputValue(event.target.value);\n        console.log(inputValue)\n      };\n    \n    const submitTask = (e) =>{\n        e.preventDefault();\n        \n        let temp = taskState;\n        const myNewObj = {\n            name: inputValue,\n            isComplete: false,\n            id: taskState.length \n        }\n        temp.push(myNewObj)\n        setTaskState(temp)\n        setTaskDisplay(temp);// new check this\n        setInputValue('');\n        \n        \n        // console.log(taskState);\n        // console.log(taskState[0].isComplete)\n\n    }\n    const dropDownBtn = (e) => {\n        e.preventDefault();\n    }\n    \n    \n    const liOnClick = (e,id) => {\n        e.preventDefault();\n        const tempState = taskState.map(element => {\n            if (element.id === id){\n                element.isComplete = !element.isComplete\n            }\n            return element\n        })\n        setTaskState(tempState)\n        console.log('test3')\n        console.log(taskState)\n    }\n    const inCompleteTaskHandler = (e)=>{\n        e.preventDefault();\n        let incompleteTemp = taskState;\n        const incompleteArray = [];\n        for (let i = 0; i<incompleteTemp.length; i++){\n            if (incompleteTemp[i].isComplete === false){\n                incompleteArray.push(incompleteTemp[i])\n                console.log(incompleteTemp[i])\n            }\n        }\n        console.log(incompleteArray)\n        setIncompleteTask(incompleteArray)\n        setTaskDisplay(incompleteArray);// i want to use .map but cant get it to work\n    }\n\n    const completedTaskHandler = (e)=>{\n        e.preventDefault();\n        let completeTemp = taskState;\n        const completeArray = [];\n        for (let i = 0; i <completeTemp.length; i++){\n            if (completeTemp[i].isComplete === true){\n                completeArray.push(completeTemp[i])\n                console.log(completeTemp[i])\n        }\n    }\n    console.log(completeArray);\n    setCompleteTask(completeArray);\n    setTaskDisplay(completeArray);\n\n    \n    }\n    const allTaskHandler =(e)=> {\n        e.preventDefault();\n        console.log(taskState)\n        setTaskDisplay(taskState);\n    }\n\n    const deleteFunction = (e, element)=>{\n        e.preventDefault();\n        const newArray = taskState.filter((item) => item !== element);// this is working\n        console.log('newArray',newArray)\n\n        // for some reasi the setTaskState is not working, as in its not setting the taskState to equal the newArray. \n        setTaskState(newArray);// this is not\n        console.log('taskState',taskState)\n        setTaskDisplay(newArray);\n       \n        \n       \n    }\n    let taskDisplayView = taskDisplay.map((element,index) => {\n     return(  \n        <div className = 'taskContent'>\n            <li className = {`tasks${element.isComplete  ? 'crossed': ''}`}onClick = {(e)=> liOnClick(e, element.id)}>{element.name}</li>\n            <button className = 'dltBtn' onClick ={(e) => deleteFunction(e, element)} >Delete</button>\n        </div>\n     )\n    })\n\n    // create a task logic\n\n    // my JSX\n\n    return (\n        <div>\n            <div id = 'formAndInput'>\n        <form>\n            <input value = {inputValue} onChange={inputFunctionHandler} ></input>\n            <button onClick = {submitTask}>Submit</button>\n        </form>\n        <div className=\"dropdown\">\n          <button className=\"dropbtn\" onClick={dropDownBtn}>View</button>\n          <div className=\"dropdown-content\">\n            <button onClick = {allTaskHandler}>All</button>\n            <button onClick = {completedTaskHandler}>Complete</button>\n            <button onClick = {inCompleteTaskHandler}>Incomplete</button>\n          </div>\n        </div>\n        </div>\n    \n        <div className=\"taskDisplay\">\n            {taskDisplayView}\n        </div>\n        </div>\n    )\n}\n\n\n\nexport default Tasks;\n\n// Use a state to display the var, change that atate based on the dropdown menu\n// OR use the varieble, but set its value to the taskDisplay State, witch will change base on the drop down menue. The only issue of how to give it a default state? maybe just do this const [taskDisplay, setTaskDisplay] = ([taskState])\n"]},"metadata":{},"sourceType":"module"}