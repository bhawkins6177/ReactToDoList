{"ast":null,"code":"var _jsxFileName = \"/home/brandon/the_odin_project/reacttodolist/src/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, ReactDOM } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks() {\n  _s();\n\n  // all of my states \n  const [taskState, setTaskState] = useState([]);\n  const [incompleteTask, setIncompleteTask] = useState([]);\n  const [completeTask, setCompleteTask] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [taskDisplay, setTaskDisplay] = useState([]); // logic\n  // function task(name) {\n  //     this.name = name\n  //     this.isComplete = false;\n  //   }\n\n  const inputFunctionHandler = event => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    console.log(inputValue);\n  };\n\n  const submitTask = e => {\n    e.preventDefault();\n    let temp = taskState;\n    const myNewObj = {\n      name: inputValue,\n      isComplete: false,\n      id: taskState.length\n    };\n    temp.push(myNewObj);\n    setTaskState(temp);\n    setTaskDisplay(temp); // new check this\n\n    setInputValue(''); // console.log(taskState);\n    // console.log(taskState[0].isComplete)\n  };\n\n  const dropDownBtn = e => {\n    e.preventDefault();\n  };\n\n  const liOnClick = (e, id) => {\n    e.preventDefault();\n    const tempState = taskState.map(element => {\n      if (element.id === id) {\n        element.isComplete = !element.isComplete;\n      }\n\n      return element;\n    });\n    setTaskState(tempState);\n    console.log('test3');\n    console.log(taskState);\n  };\n\n  const inCompleteTaskHandler = e => {\n    e.preventDefault();\n    let incompleteTemp = taskState;\n    const incompleteArray = [];\n\n    for (let i = 0; i < incompleteTemp.length; i++) {\n      if (incompleteTemp[i].isComplete === false) {\n        incompleteArray.push(incompleteTemp[i]);\n        console.log(incompleteTemp[i]);\n      }\n    }\n\n    console.log(incompleteArray);\n    setIncompleteTask(incompleteArray);\n    setTaskDisplay(incompleteArray); // i want to use .map but cant get it to work\n  };\n\n  const completedTaskHandler = e => {\n    e.preventDefault();\n    let completeTemp = taskState;\n    const completeArray = [];\n\n    for (let i = 0; i < completeTemp.length; i++) {\n      if (completeTemp[i].isComplete === true) {\n        completeArray.push(completeTemp[i]);\n        console.log(completeTemp[i]);\n      }\n    }\n\n    console.log(completeArray);\n    setCompleteTask(completeArray);\n    setTaskDisplay(completeArray);\n  };\n\n  const allTaskHandler = e => {\n    e.preventDefault();\n    console.log(taskState);\n    setTaskDisplay(taskState);\n  };\n\n  const deleteFunction = (e, element) => {\n    e.preventDefault();\n    const newArray = taskState.filter(item => item !== element);\n    setTaskState(newArray); // will go here\n\n    setTaskDisplay(taskState);\n    allTaskHandler();\n    console.log(taskState); // let incompleteCounter = 0;\n    // let completeCounter = 0;\n    // // need to include logic to figure out what display you are in and set the diaplsyTaskSTate accoringly. Maybe loop through and check the true false value?\n    // for (let i = 0; i<taskDisplay.length; i++){\n    //     taskDisplay[i].isComplete ? completeCounter++ : incompleteCounter++\n    // }\n    // console.log('incompleteCounter',incompleteCounter,'completeCounter',completeCounter)\n    // if (incompleteCounter > completeCounter){\n    //     setTaskDisplay(incompleteTask);\n    //     console.log(completeTask)\n    //     incompleteCounter = 0;\n    //     completeCounter = 0;\n    // }\n    // if (completeCounter > incompleteCounter){\n    //     setTaskDisplay(completeTask);\n    //     console.log(incompleteTask)\n    //     incompleteCounter = 0;\n    //     completeCounter = 0;\n    // } else {\n    //     setTaskDisplay(taskState)\n    // }\n  };\n\n  let taskDisplayView = taskDisplay.map((element, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => deleteFunction(e, element),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `tasks${element.isComplete ? 'crossed' : ''}`,\n        onClick: e => liOnClick(e, element.id),\n        children: element.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this);\n  }); // create a task logic\n  // my JSX\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputValue,\n        onChange: inputFunctionHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitTask,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dropbtn\",\n        onClick: dropDownBtn,\n        children: \"View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: allTaskHandler,\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: completedTaskHandler,\n          children: \"Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: inCompleteTaskHandler,\n          children: \"Incomplete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks\",\n      children: taskDisplayView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tasks, \"91xpvpSo2ZAAPdhaBReheMsg1Qc=\");\n\n_c = Tasks;\nexport default Tasks; // Use a state to display the var, change that atate based on the dropdown menu\n// OR use the varieble, but set its value to the taskDisplay State, witch will change base on the drop down menue. The only issue of how to give it a default state? maybe just do this const [taskDisplay, setTaskDisplay] = ([taskState])\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/brandon/the_odin_project/reacttodolist/src/Tasks.js"],"names":["React","useState","useEffect","ReactDOM","Tasks","taskState","setTaskState","incompleteTask","setIncompleteTask","completeTask","setCompleteTask","inputValue","setInputValue","taskDisplay","setTaskDisplay","inputFunctionHandler","event","preventDefault","target","value","console","log","submitTask","e","temp","myNewObj","name","isComplete","id","length","push","dropDownBtn","liOnClick","tempState","map","element","inCompleteTaskHandler","incompleteTemp","incompleteArray","i","completedTaskHandler","completeTemp","completeArray","allTaskHandler","deleteFunction","newArray","filter","item","taskDisplayView","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,QAApC,QAAmD,OAAnD;;;AAKA,SAASC,KAAT,GAAgB;AAAA;;AAEZ;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,EAAD,CAApD;AAEA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C,CAXY,CAaZ;AACA;AACA;AACA;AAEA;;AAEA,QAAMc,oBAAoB,GAAIC,KAAD,IAAW;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACAL,IAAAA,aAAa,CAACI,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACD,GAJH;;AAMA,QAAMW,UAAU,GAAIC,CAAD,IAAM;AACrBA,IAAAA,CAAC,CAACN,cAAF;AAEA,QAAIO,IAAI,GAAGnB,SAAX;AACA,UAAMoB,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAAEf,UADO;AAEbgB,MAAAA,UAAU,EAAE,KAFC;AAGbC,MAAAA,EAAE,EAAEvB,SAAS,CAACwB;AAHD,KAAjB;AAKAL,IAAAA,IAAI,CAACM,IAAL,CAAUL,QAAV;AACAnB,IAAAA,YAAY,CAACkB,IAAD,CAAZ;AACAV,IAAAA,cAAc,CAACU,IAAD,CAAd,CAXqB,CAWA;;AACrBZ,IAAAA,aAAa,CAAC,EAAD,CAAb,CAZqB,CAerB;AACA;AAEH,GAlBD;;AAmBA,QAAMmB,WAAW,GAAIR,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACN,cAAF;AACH,GAFD;;AAKA,QAAMe,SAAS,GAAG,CAACT,CAAD,EAAGK,EAAH,KAAU;AACxBL,IAAAA,CAAC,CAACN,cAAF;AACA,UAAMgB,SAAS,GAAG5B,SAAS,CAAC6B,GAAV,CAAcC,OAAO,IAAI;AACvC,UAAIA,OAAO,CAACP,EAAR,KAAeA,EAAnB,EAAsB;AAClBO,QAAAA,OAAO,CAACR,UAAR,GAAqB,CAACQ,OAAO,CAACR,UAA9B;AACH;;AACD,aAAOQ,OAAP;AACH,KALiB,CAAlB;AAMA7B,IAAAA,YAAY,CAAC2B,SAAD,CAAZ;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAZ;AACH,GAXD;;AAYA,QAAM+B,qBAAqB,GAAIb,CAAD,IAAK;AAC/BA,IAAAA,CAAC,CAACN,cAAF;AACA,QAAIoB,cAAc,GAAGhC,SAArB;AACA,UAAMiC,eAAe,GAAG,EAAxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACF,cAAc,CAACR,MAAjC,EAAyCU,CAAC,EAA1C,EAA6C;AACzC,UAAIF,cAAc,CAACE,CAAD,CAAd,CAAkBZ,UAAlB,KAAiC,KAArC,EAA2C;AACvCW,QAAAA,eAAe,CAACR,IAAhB,CAAqBO,cAAc,CAACE,CAAD,CAAnC;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,cAAc,CAACE,CAAD,CAA1B;AACH;AACJ;;AACDnB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,eAAZ;AACA9B,IAAAA,iBAAiB,CAAC8B,eAAD,CAAjB;AACAxB,IAAAA,cAAc,CAACwB,eAAD,CAAd,CAZ+B,CAYC;AACnC,GAbD;;AAeA,QAAME,oBAAoB,GAAIjB,CAAD,IAAK;AAC9BA,IAAAA,CAAC,CAACN,cAAF;AACA,QAAIwB,YAAY,GAAGpC,SAAnB;AACA,UAAMqC,aAAa,GAAG,EAAtB;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEE,YAAY,CAACZ,MAAhC,EAAwCU,CAAC,EAAzC,EAA4C;AACxC,UAAIE,YAAY,CAACF,CAAD,CAAZ,CAAgBZ,UAAhB,KAA+B,IAAnC,EAAwC;AACpCe,QAAAA,aAAa,CAACZ,IAAd,CAAmBW,YAAY,CAACF,CAAD,CAA/B;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYoB,YAAY,CAACF,CAAD,CAAxB;AACP;AACJ;;AACDnB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,aAAZ;AACAhC,IAAAA,eAAe,CAACgC,aAAD,CAAf;AACA5B,IAAAA,cAAc,CAAC4B,aAAD,CAAd;AAGC,GAfD;;AAgBA,QAAMC,cAAc,GAAGpB,CAAD,IAAM;AACxBA,IAAAA,CAAC,CAACN,cAAF;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAZ;AACAS,IAAAA,cAAc,CAACT,SAAD,CAAd;AACH,GAJD;;AAMA,QAAMuC,cAAc,GAAG,CAACrB,CAAD,EAAIY,OAAJ,KAAc;AACjCZ,IAAAA,CAAC,CAACN,cAAF;AACA,UAAM4B,QAAQ,GAAGxC,SAAS,CAACyC,MAAV,CAAkBC,IAAD,IAAUA,IAAI,KAAKZ,OAApC,CAAjB;AAEA7B,IAAAA,YAAY,CAACuC,QAAD,CAAZ,CAJiC,CAKjC;;AACA/B,IAAAA,cAAc,CAACT,SAAD,CAAd;AACAsC,IAAAA,cAAc;AACdvB,IAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAZ,EARiC,CASjC;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAhCD;;AAiCA,MAAI2C,eAAe,GAAGnC,WAAW,CAACqB,GAAZ,CAAgB,CAACC,OAAD,EAASc,KAAT,KAAmB;AACxD,wBACG;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAI1B,CAAD,IAAOqB,cAAc,CAACrB,CAAD,EAAIY,OAAJ,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAK,QAAOA,OAAO,CAACR,UAAR,GAAsB,SAAtB,GAAiC,EAAG,EAA7D;AAA+D,QAAA,OAAO,EAAKJ,CAAD,IAAMS,SAAS,CAACT,CAAD,EAAIY,OAAO,CAACP,EAAZ,CAAzF;AAAA,kBAA2GO,OAAO,CAACT;AAAnH;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADH;AAMA,GAPqB,CAAtB,CApIY,CA6IZ;AAEA;;AAEA,sBACI;AAAA,4BACA;AAAA,8BACI;AAAO,QAAA,KAAK,EAAIf,UAAhB;AAA4B,QAAA,QAAQ,EAAEI;AAAtC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAIO,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAKA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,OAAO,EAAES,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAIY,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAIH,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,OAAO,EAAIJ,qBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALA,eAcA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBACKY;AADL;AAAA;AAAA;AAAA;AAAA,YAdA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GArKQ5C,K;;KAAAA,K;AAyKT,eAAeA,KAAf,C,CAEA;AACA","sourcesContent":["import React, {useState, useEffect, ReactDOM} from \"react\"\n\n\n\n\nfunction Tasks(){\n\n    // all of my states \n    const [taskState, setTaskState] = useState([])\n\n    const [incompleteTask, setIncompleteTask] = useState([])\n\n    const [completeTask, setCompleteTask] = useState([])\n    \n    const [inputValue, setInputValue] = useState('')  \n\n    const [taskDisplay, setTaskDisplay] = useState([])\n\n    // logic\n    // function task(name) {\n    //     this.name = name\n    //     this.isComplete = false;\n\n    //   }\n    \n    const inputFunctionHandler = (event) => {\n        event.preventDefault()\n        setInputValue(event.target.value);\n        console.log(inputValue)\n      };\n    \n    const submitTask = (e) =>{\n        e.preventDefault();\n        \n        let temp = taskState;\n        const myNewObj = {\n            name: inputValue,\n            isComplete: false,\n            id: taskState.length \n        }\n        temp.push(myNewObj)\n        setTaskState(temp)\n        setTaskDisplay(temp);// new check this\n        setInputValue('');\n        \n        \n        // console.log(taskState);\n        // console.log(taskState[0].isComplete)\n\n    }\n    const dropDownBtn = (e) => {\n        e.preventDefault();\n    }\n    \n    \n    const liOnClick = (e,id) => {\n        e.preventDefault();\n        const tempState = taskState.map(element => {\n            if (element.id === id){\n                element.isComplete = !element.isComplete\n            }\n            return element\n        })\n        setTaskState(tempState)\n        console.log('test3')\n        console.log(taskState)\n    }\n    const inCompleteTaskHandler = (e)=>{\n        e.preventDefault();\n        let incompleteTemp = taskState;\n        const incompleteArray = [];\n        for (let i = 0; i<incompleteTemp.length; i++){\n            if (incompleteTemp[i].isComplete === false){\n                incompleteArray.push(incompleteTemp[i])\n                console.log(incompleteTemp[i])\n            }\n        }\n        console.log(incompleteArray)\n        setIncompleteTask(incompleteArray)\n        setTaskDisplay(incompleteArray);// i want to use .map but cant get it to work\n    }\n\n    const completedTaskHandler = (e)=>{\n        e.preventDefault();\n        let completeTemp = taskState;\n        const completeArray = [];\n        for (let i = 0; i <completeTemp.length; i++){\n            if (completeTemp[i].isComplete === true){\n                completeArray.push(completeTemp[i])\n                console.log(completeTemp[i])\n        }\n    }\n    console.log(completeArray);\n    setCompleteTask(completeArray);\n    setTaskDisplay(completeArray);\n\n    \n    }\n    const allTaskHandler =(e)=> {\n        e.preventDefault();\n        console.log(taskState)\n        setTaskDisplay(taskState);\n    }\n\n    const deleteFunction = (e, element)=>{\n        e.preventDefault();\n        const newArray = taskState.filter((item) => item !== element);\n    \n        setTaskState(newArray);\n        // will go here\n        setTaskDisplay(taskState)\n        allTaskHandler();\n        console.log(taskState)\n        // let incompleteCounter = 0;\n        // let completeCounter = 0;\n        // // need to include logic to figure out what display you are in and set the diaplsyTaskSTate accoringly. Maybe loop through and check the true false value?\n        // for (let i = 0; i<taskDisplay.length; i++){\n            \n        //     taskDisplay[i].isComplete ? completeCounter++ : incompleteCounter++\n        \n        // }\n        // console.log('incompleteCounter',incompleteCounter,'completeCounter',completeCounter)\n        // if (incompleteCounter > completeCounter){\n        //     setTaskDisplay(incompleteTask);\n        //     console.log(completeTask)\n        //     incompleteCounter = 0;\n        //     completeCounter = 0;\n        // }\n        // if (completeCounter > incompleteCounter){\n        //     setTaskDisplay(completeTask);\n        //     console.log(incompleteTask)\n        //     incompleteCounter = 0;\n        //     completeCounter = 0;\n        // } else {\n        //     setTaskDisplay(taskState)\n        // }\n    }\n    let taskDisplayView = taskDisplay.map((element,index) => {\n     return(  \n        <div>\n            <button onClick ={(e) => deleteFunction(e, element)} >Delete</button>\n            <li className = {`tasks${element.isComplete  ? 'crossed': ''}`}onClick = {(e)=> liOnClick(e, element.id)}>{element.name}</li>\n        </div>\n     )\n    })\n\n    // create a task logic\n\n    // my JSX\n\n    return (\n        <div>\n        <form>\n            <input value = {inputValue} onChange={inputFunctionHandler} ></input>\n            <button onClick = {submitTask}>Submit</button>\n        </form>\n        <div className=\"dropdown\">\n          <button className=\"dropbtn\" onClick={dropDownBtn}>View</button>\n          <div className=\"dropdown-content\">\n            <button onClick = {allTaskHandler}>All</button>\n            <button onClick = {completedTaskHandler}>Complete</button>\n            <button onClick = {inCompleteTaskHandler}>Incomplete</button>\n          </div>\n        </div>\n    \n        <div className=\"tasks\">\n            {taskDisplayView}\n        </div>\n        </div>\n    )\n}\n\n\n\nexport default Tasks;\n\n// Use a state to display the var, change that atate based on the dropdown menu\n// OR use the varieble, but set its value to the taskDisplay State, witch will change base on the drop down menue. The only issue of how to give it a default state? maybe just do this const [taskDisplay, setTaskDisplay] = ([taskState])\n"]},"metadata":{},"sourceType":"module"}