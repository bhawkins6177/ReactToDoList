{"ast":null,"code":"var _jsxFileName = \"/home/brandon/the_odin_project/reacttodolist/src/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, ReactDOM } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks(props) {\n  _s();\n\n  // all of my states \n  const [taskState, setTaskState] = useState([]);\n  const [inputValue, setInputValue] = useState(''); // logic\n\n  const inputFunctionHandler = event => {\n    setInputValue(event.target.value);\n    console.log(inputValue);\n  };\n\n  function task(name) {\n    this.name = name;\n    this.isComplete = false;\n  }\n\n  const submitTask = e => {\n    e.preventDefault();\n    let temp = taskState;\n    temp.push(new task(inputValue));\n    setTaskState(temp);\n    setInputValue('');\n    console.log(taskState);\n    console.log(taskState[0].isComplete);\n  };\n\n  const dropDownBtn = e => {\n    e.preventDefault();\n  };\n\n  const checkBoxHandler = position => {\n    console.log('test'); // for (let i = 0; i<taskState.length; i++){\n    //     if (i === position && taskState[i].isComplete === true){\n    //         taskState[i].isComplete = false;\n    //     } \n    //     if (i === position && taskState[i].isComplete === false){\n    //         taskState[i].isComplete = true;\n    //     }\n    // }\n    // fix this it is not working\n\n    let checkB = taskState.forEach((element, index) => index === position ? !element.isComplete : element.isComplete); //map((item, index) => (index === position ? !item : item));\n\n    let taskDisplay = taskState.map((element, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: element.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkbox\",\n          type: \"checkbox\",\n          onChange: checkBoxHandler(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    }); // create a task logic\n    // my JSX\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: inputFunctionHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitTask,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dropbtn\",\n          onClick: dropDownBtn,\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Incomplete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks\",\n        children: taskDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this);\n  };\n}\n\n_s(Tasks, \"Q+VoK9DPphZq/MsFupogScgVSKE=\");\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/brandon/the_odin_project/reacttodolist/src/Tasks.js"],"names":["React","useState","useEffect","ReactDOM","Tasks","props","taskState","setTaskState","inputValue","setInputValue","inputFunctionHandler","event","target","value","console","log","task","name","isComplete","submitTask","e","preventDefault","temp","push","dropDownBtn","checkBoxHandler","position","checkB","forEach","element","index","taskDisplay","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, ReactDOM} from \"react\"\n\n\n\n\nfunction Tasks(props){\n\n    // all of my states \n    const [taskState, setTaskState] = useState([])\n    \n    const [inputValue, setInputValue] = useState('')  \n    // logic\n    \n    const inputFunctionHandler = (event) => {\n        setInputValue(event.target.value);\n        console.log(inputValue)\n      };\n\n      function task(name) {\n        this.name = name\n        this.isComplete = false\n      }\n    const submitTask = (e) =>{\n        e.preventDefault();\n        let temp = taskState;\n        temp.push(new task(inputValue))\n        setTaskState(temp);\n        setInputValue('');\n        console.log(taskState);\n        console.log(taskState[0].isComplete)\n\n    }\n    const dropDownBtn = (e) => {\n        e.preventDefault();\n    }\n    const checkBoxHandler = (position) => {\n        console.log('test')\n        \n        // for (let i = 0; i<taskState.length; i++){\n        //     if (i === position && taskState[i].isComplete === true){\n        //         taskState[i].isComplete = false;\n        //     } \n        //     if (i === position && taskState[i].isComplete === false){\n        //         taskState[i].isComplete = true;\n        //     }\n        // }\n        // fix this it is not working\n       let checkB = taskState.forEach((element, index) => \n       (index === position ? !element.isComplete : element.isComplete));\n         \n         //map((item, index) => (index === position ? !item : item));\n\n    let taskDisplay = taskState.map((element,index) => {\n     return(  \n        <div>\n            <button >Delete</button>\n            <li>{element.name}</li>\n            <input className = \"checkbox\" type=\"checkbox\"  onChange = {checkBoxHandler(index)} ></input>\n        </div>\n     )\n    })\n    // create a task logic\n    \n\n    // my JSX\n\n    return (\n        <div>\n        <form>\n            <input value = {inputValue} onChange={inputFunctionHandler} ></input>\n            <button onClick = {submitTask}>Submit</button>\n        </form>\n        <div className=\"dropdown\">\n          <button className=\"dropbtn\" onClick={dropDownBtn}>View</button>\n          <div className=\"dropdown-content\">\n            <button>All</button>\n            <button>Complete</button>\n            <button>Incomplete</button>\n          </div>\n        </div>\n    \n        <div className=\"tasks\">\n            {taskDisplay}\n        </div>\n        </div>\n    )\n}\n}\n\n\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}